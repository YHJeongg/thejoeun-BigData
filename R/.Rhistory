test <- c(1:13)
for(i in 1:13) {
diabetes <- cbind(test[i] = (diabetes,diabetes$Age == test[i]))
test <- c(1:13)
for(i in 1:13) {
diabetes <- cbind(test[i] = (diabetes,diabetes$Age == test[i])
test <- c(1:13)
for(i in 1:13) {
diabetes <- cbind(test[i] == (diabetes,diabetes$Age == test[i])
test <- c(1:13)
for(i in 1:13) {
diabetes2 <- cbind(diabetes,diabetes$Age == test[i]
}
test <- c(1:13)
for(i in 1:13) {
diabetes2 <- cbind(test1[i] = (diabetes,diabetes$Age == test[i]))
test <- c(1:13)
for(i in 1:13) {
diabetes2 <- cbind(diabetes,diabetes$Age == test[i])
}
diabetes2
diabetes <- read.csv('Data/diabetes_data.csv')
diabetes
diabetes <- diabetes[,-7]
diabetes$Diabetes <- as.factor(diabetes$Diabetes)
diabetes
describe(diabetes)
test <- c(1:13)
for(i in 1:13) {
diabetes2 <- cbind(diabetes,diabetes$Age == test[i])
}
diabetes2
diabetes <- read.csv('Data/diabetes_data.csv')
diabetes
diabetes <- diabetes[,-7]
diabetes$Diabetes <- as.factor(diabetes$Diabetes)
diabetes
describe(diabetes)
test <- c(1:13)
for(i in 1:13) {
diabetes <- cbind(diabetes,diabetes$Age == test[i])
}
diabetes
colnames(diabetes)
colnames(diabetes)[1:17]
colnames(diabetes)[1:18]
colnames(diabetes) <- c(colnames(diabetes)[1:17], x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13)
colnames(diabetes) <- c(colnames(diabetes)[1:17], 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13')
diabetes
diabetes <- diabetes[,-1]
diabetes
samp <- createDataPartition(diabetes$Diabetes, p=0.7, list=F)
data.train <- diabetes[samp,]
data.test <- diabetes[-samp,]
model.nnet <- nnet(Diabetes ~ ., data = data.train, size = 10)
x <- subset(data.test, select = -Diabetes)
y <- data.test$Diabetes
pred <- predict(model.nnet, x, type = "class")
mean(pred == y)
table(pred, y)
mean(pred == y)
table(pred, y)
rf <- randomForest(Diabetes ~ ., data = data.train, ntree = 100)
pred1 <- predict(rf, x)
mean(pred1 == y) * 100
table(pred1, y)
model <- svm(Diabetes ~ ., data = data.train)
pred2 <- predict(model, x)
mean(pred2 == y)
table(pred2,y)
mean(pred2 == y)
mean(pred2 == y)
table(pred2,y)
tree <- ctree(Diabetes ~ ., data = data.train)
library(ctree)
library(ctree)
library(ctree)
library(nnet)
library(dplyr)
library(randomForest)
library(e1071)
library(caret)
library(ctree)
library(ctree)
library(ctree)
library(ctree)
library('ctree')
library(party)
tree <- ctree(Diabetes ~ ., data = data.train)
pred3 <- predict(tree, x)
mean(pred3 == y)
table(pred3, y)
lm(. ~ diabetes$Diabetes)
lm(diabetes$. ~ diabetes$Diabetes)
lm(diabetes$Sex ~ diabetes$Diabetes)
info(diabetes)
info(data.frame(diabetes))
pred1 <- predict(rf, x, type = 'prob')
mean(pred1 == y) * 100
table(pred1, y)
mean(pred1 == y) * 100
mean(pred1 == y)
rf <- randomForest(Diabetes ~ ., data = data.train, ntree = 100)
pred1 <- predict(rf, x, type = 'prob')
mean(pred1 == y)
table(pred1, y)
pred1
pred <- predict(model.nnet, x, type = "class", type='prob')
pred <- predict(model.nnet, x, type = "class", type='prob')
pred <- predict(model.nnet, x, type = "prob")
pred <- predict(model.nnet, x, type = "class")
pred3 <- predict(tree, x, type='prob')
pred3
pred2 <- predict(model, x, type = 'prob')
pred2
mean(pred2 == y)
table(pred2, y)
table(pred2, y)
mean(pred2 == y)
table(pred2, y)
mean(pred3 == y)
table(pred3, y)
tree <- ctree(Diabetes ~ ., data = data.train)
pred3 <- predict(tree, x, type='prob')
mean(pred3 == y)
pred3
head(round(pred3,2))
round(pred3,2)
mean(pred3 == y)
table(pred3, y)
head(round(as.numeric(pred3),2))
round(as.numeric(pred3),2)
pred3
as.data.frame(pred3)
pred3
t(as.data.frame(pred3))
as.data.frame(t(pred3))
pred3)
pred3
plot(pred3)
plot(pred1)
plot(pred2)
plot(pred1)
barplot(diabetes$Sex, diabetes$Diabetes)
barplot(diabetes$Sex ~ diabetes$Diabetes)
barplot(diabetes$Diabetes, diabetes$Sex)
barplot(diabetes$Diabetes ~ diabetes$Sex)
diabetes$Diabetes
barplot(diabetes$Sex ~ diabetes$Diabetes)
barplot(diabetes$Sex, diabetes$Diabetes)
barplot(diabetes$Sex, diabetes$Diabetes,
xlime = 3
)
barplot(diabetes$Sex, diabetes$Diabetes,
xlime = c(100)
)
barplot(diabetes$Sex, diabetes$Diabetes,
xlime = c(0,100)
)
barplot(diabetes$Sex, diabetes$Diabetes,
xlime = c(0,1)
)
diabetes
barplot(diabetes$Sex, diabetes$Diabetes
xlime = c('남자','여자')
barplot(diabetes$Sex, diabetes$Diabetes,
xlime = c('남자','여자')
)
barplot(diabetes$Sex, diabetes$Diabetes,
xlime = c('남자','여자'),
ylime = c(0,1)
)
barplot(diabetes$Sex, diabetes$Diabetes,
xlime = c('남자','여자'),
ylime = c(0,1)
)
barplot(diabetes$Diabetes, diabetes$Sex,
xlime = c('남자','여자'),
ylime = c(0,1)
)
barplot(diabetes$Diabetes, diabetes$Sex,
xlime = c('남자','여자'),
ylime = c(0,1)
)
barplot(as.matrix(diabetes$Diabetes), diabetes$Sex,
xlime = c('남자','여자'),
ylime = c(0,1)
)
barplot(as.numeric(diabetes$Diabetes), diabetes$Sex,
xlime = c('남자','여자'),
ylime = c(0,1)
)
table(diabetes$Diabetes)
barplot(table(diabetes$Diabetes)
)
barplot(table(diabetes$Sex)
)
boxplot(diabetes)
boxplot(diabetes$BMI)
status(boxplot(diabetes$BMI))
statas(boxplot(diabetes$BMI))
stats(boxplot(diabetes$BMI))
boxplot(diabetes$BMI)$stats
33 - 29 + 45
boxplot(diabetes$BMI)$stats
boxplot(diabetes$BMI)$stats
33 - 29 + 45
head(pred3)
head(pred1)
library(fpc)
library(fpc)
install.packages(library(fpc))
install.packages(fpc)
install.packages("fpc")
library(fpc)
library('fpc')
library('fpc')
library(fpc)
install.packages("fpc")
library(fpc)
diabetes$cluster
diabetes$withinss
diabetes$withinss
test <- kmeans(diabetes, 17)
test <- kmeans(diabetes, 3)
diabetes
diabetes[,1:17]
diabetes[,1:16]
result <- kmeans(diabetes[,1:16], 15)
result
plotcluster(diabetes[,1:16], result$cluster, color=TRUE, shade=TRUE)
diabetes[,1:16]
plotcluster(diabetes[,1:15], result$cluster, color=TRUE, shade=TRUE)
test <- read.csv('Data/diabetes_data.csv')
test <- [,7]
test <- test[,-7]
test <- read.csv('Data/diabetes_data.csv')
test <- test[,-c(1,7)]
plotcluster(test, result$cluster, color=TRUE, shade=TRUE)
result <- kmeans(diabetes[,1:16], 3)
plotcluster(test, result$cluster, color=TRUE, shade=TRUE)
result <- kmeans(diabetes[,1:16], 100)
plotcluster(test, result$cluster, color=TRUE, shade=TRUE)
result <- kmeans(diabetes[,1:16], 20)
plotcluster(test, result$cluster, color=TRUE, shade=TRUE)1
plotcluster(test, result$cluster, color=TRUE, shade=TRUE)
result <- kmeans(diabetes[,1:16], 5)
plotcluster(test, result$cluster, color=TRUE, shade=TRUE)
plotcluster(test, result$cluster)
head(result)
install.packages("NbClust")
library(NbClust)
NbClust(diabetes, min.nc=2, max.nc=6, method="kmeans")
NbClust(diabetes[,1], min.nc=2, max.nc=6, method="kmeans")
NbClust(diabetes[,1:4], min.nc=2, max.nc=6, method="kmeans")
NbClust(diabetes[,1:4], min.nc=2, max.nc=10, method="kmeans")
NbClust(diabetes[,1:4], min.nc=2, max.nc=100, method="kmeans")
NbClust(iris[,1:4], min.nc=2, max.nc=6, method="kmeans")
NbClust(test[,1:4], min.nc=2, max.nc=6, method="kmeans")
NbClust(test[,1:2], min.nc=2, max.nc=6, method="kmeans")
NbClust(test[1:10,1:2], min.nc=2, max.nc=6, method="kmeans")
NbClust(test[1:10,1:2], min.nc=2, max.nc=6, method="kmeans")
NbClust(test[1:100,1:2], min.nc=2, max.nc=6, method="kmeans")
NbClust(test[1:100,1:4], min.nc=2, max.nc=6, method="kmeans")
NbClust(test[1:100,], min.nc=2, max.nc=6, method="kmeans")
NbClust(test[1:100,1:15], min.nc=2, max.nc=6, method="kmeans")
NbClust(test[1:100,1:15], min.nc=-4, max.nc=6, method="kmeans")
NbClust(test[1:100,1:15], min.nc=0, max.nc=6, method="kmeans")
NbClust(test[1:100,1:15], min.nc=1, max.nc=6, method="kmeans")
NbClust(test[1:100,1:15], min.nc=2, max.nc=6, method="kmeans")
result <- kmeans(diabetes[,1:16], 2)
plotcluster(test, result$cluster)
library(ggplot2)
ggplot(result)
ggplot(result, data=diabetes)
fviz_cluster(result, data=diabetes)
ggplot
ggplot(result, data=diabetes)
result
diabetes2 <- read.csv('Data/diabetes_data.csv')
head(diabetes2)
result <- kmeans(diabetes[,1:16], 3)
plotcluster(test, result$cluster)
plot(diabetes[c('BMI','Diabetes')], col=result$cluster)
plot(diabetes, col=result$cluster)
plot(diabetes2[c('Age','Diabetes')], col=result$cluster)
pamk(diabetes2)
pamk(diabetes2[1:16])
pamk(diabetes2[1:15])
pamk(diabetes2[100,])
pamk(diabetes2[100,1:18])
pamk(diabetes2[100,1:ncol(diabetes2)])
pamk(diabetes2[100,1:ncol(diabetes2)],diabetes2$Diabetes)
pam(diabetes2)
cor(diabetes2)
pairs(diabetes2)
heatmap(diabetes2)
diabetes2
scale(diabetes2)
test2 <- scale(diabetes2)
heatmap(test2)
test2 <- scale(diabetes2[1000,])
heatmap(test2)
test2
as.data.frame(test2)
diabetes2[1000,]
test2 <- scale(diabetes2[1:1000,])
heatmap(test2)
test2
test2 <- scale(diabetes2[1:1000,1:(ncol(diabetes2)-1)])
heatmap(test2)
test2 <- scale(diabetes2[1:100,1:(ncol(diabetes2)-1)])
heatmap(test2)
test2 <- scale(diabetes2[1:10,1:(ncol(diabetes2)-1)])
heatmap(test2)
heatmap(test2)
test2 <- scale(diabetes2[1:50,1:(ncol(diabetes2)-1)])
heatmap(test2)
heatmap(test2)
test2 <- scale(diabetes2[1:100,1:(ncol(diabetes2)-1)])
heatmap(test2)
heatmap(test2, scale = none)
heatmap(test2, scale = none)
heatmap(test2, scale = 'none')
describe(diabetes2)
diabetes2
View(diabetes2)
boxplot(diabetes2)
boxplot(diabetes2,
axis.cex = 0.7
)
boxplot(diabetes2,
las = 1
)
boxplot(diabetes2,
las = 2
)
boxplot(diabetes2,
las = 2,
main = "Diabetes 이상치 확인",
)
boxplot(diabetes2,
las = 2,
)
boxplot(diabetes2,
las = 2,
)
boxplot(diabetes2,
las = 2,
)
boxplot(diabetes2,
las = 2
)
boxplot(diabetes2,
las = 2,
cex.axis = 0.
)
boxplot(diabetes2,
las = 2,
cex.axis = 0.7
)
boxplot(diabetes2,
las = 2,
cex.axis = 0.6
)
boxplot(diabetes2,
las = 2,
cex.axis = 0.5
)
boxplot(diabetes2,
las = 1.5,
cex.axis = 0.5
)
boxplot(diabetes2,
las = 2.5,
cex.axis = 0.5
)
help(las)
help(las)
help(boxplot)
colSums(is.na(diabetes2))
as.data.frame(colSums(is.na(diabetes2)))
stroke <- read.csv('Data/stroke_data.csv')
head(stroke)
as.data.frame(colSums(is.na(stroke)))
plot(diabetes2[c('Age','Diabetes')], col = diabetes2[c('Age','Diabetes')])
plot(diabetes2[c('Age','Diabetes')], col = c(1,2))
plot(diabetes2[c('Age','Diabetes')], col = c('red','blue'))
data.frame(cor(diabetes2))
cor(diabetes2)
data.frame(cor(diabetes2))
install.packages("psych")
library('psych')
diabetes <- read.csv('Data/diabetes_data.csv')
diabetes
samp <- createDataPartition(diabetes$Diabetes, p=0.7, list=F)
data.train <- diabetes[samp,]
data.test <- diabetes[-samp,]
model.nnet <- nnet(Diabetes ~ ., data = data.train, size = 10)
x <- subset(data.test, select = -Diabetes)
y <- data.test$Diabetes
pred <- predict(model.nnet, x, type = "class")
write.csv(diabetes2,'Data/')
write.csv('Data/',diabetes2)
write.csv('Data/diabetes2.csv',diabetes2)
write.csv(diabetes2,'Data/diabetes2.csv')
corDia <- data.frame(cor(diabetes2))
write.csv(corDia,'Data/corDia.csv')
corDia
round(corDia,2)
corDia <- round(corDia,2)
write.csv(corDia,'Data/corDia.csv')
cor(stroke)
corStroke <- as.data.frame(cor(stroke))
write.csv(corStroke, 'Data/corStroke.csv')
corStroke <- round(corStroke, 2)
write.csv(corStroke, 'Data/corStroke.csv')
stroke <- na.omit(stroke)
corStroke <- as.data.frame(cor(stroke))
corStroke <- round(corStroke, 2)
write.csv(corStroke, 'Data/corStroke.csv')
str(diabetes2)
str(diabetes2[,-c(3,4,6,9,10,11,13,)])
str(diabetes2[,-c(3,4,6,9,10,11,13,)])
str(diabetes2[,-c(3,4,6,9,10,11,13,)])
str(diabetes2[,-c(3,4,6,9,10,11,13)])
str(diabetes2[,-c(2,3,4,6,9,10,11,13)])
diabetes3 <- diabetes2[,-c(2,3,4,6,9,10,11,13)]
samp <- createDataPartition(diabetes3$Diabetes, p=0.7, list=F)
data.train <- diabetes3[samp,]
data.test <- diabetes3[-samp,]
model.nnet <- nnet(Diabetes ~ ., data = data.train, size = 10)
x <- subset(data.test, select = -Diabetes)
y <- data.test$Diabetes
pred <- predict(model.nnet, x, type = "class")
diabetes3$Diabetes <- as.factor(diabetes3$Diabetes)
samp <- createDataPartition(diabetes3$Diabetes, p=0.7, list=F)
data.train <- diabetes3[samp,]
data.test <- diabetes3[-samp,]
model.nnet <- nnet(Diabetes ~ ., data = data.train, size = 10)
x <- subset(data.test, select = -Diabetes)
y <- data.test$Diabetes
pred <- predict(model.nnet, x, type = "class")
mean(pred == y)
samp <- createDataPartition(diabetes3$Diabetes, p=0.7, list=F)
data.train <- diabetes3[samp,]
data.test <- diabetes3[-samp,]
model.nnet <- nnet(Diabetes ~ ., data = data.train, size = 10)
x <- subset(data.test, select = -Diabetes)
y <- data.test$Diabetes
pred <- predict(model.nnet, x, type = "class")
mean(pred == y)
samp <- createDataPartition(diabetes3$Diabetes, p=0.7, list=F)
data.train <- diabetes3[samp,]
data.test <- diabetes3[-samp,]
model.nnet <- nnet(Diabetes ~ ., data = data.train, size = 10)
x <- subset(data.test, select = -Diabetes)
y <- data.test$Diabetes
pred <- predict(model.nnet, x, type = "class")
mean(pred == y)
rf <- randomForest(Diabetes ~ ., data = data.train, ntree = 100)
pred1 <- predict(rf, x)
mean(pred1 == y)
model <- svm(Diabetes ~ ., data = data.train)
pred2 <- predict(model, x)
mean(pred2 == y)
rf <- randomForest(Diabetes ~ ., data = data.train, ntree = 100)
pred1 <- predict(rf, x)
mean(pred1 == y)
rf <- randomForest(Diabetes ~ ., data = data.train, ntree = 100)
pred1 <- predict(rf, x)
mean(pred1 == y)
rf <- randomForest(Diabetes ~ ., data = data.train, ntree = 100)
pred1 <- predict(rf, x)
mean(pred1 == y)
tree <- ctree(Diabetes ~ ., data = data.train)
pred3 <- predict(tree, x)
mean(pred3 == y)
rf <- randomForest(Diabetes ~ ., data = data.train, ntree = 100)
pred1 <- predict(rf, x)
mean(pred1 == y)
model <- svm(Diabetes ~ ., data = data.train)
pred2 <- predict(model, x)
mean(pred2 == y)
lm(. ~ diabetes3$Diabetes)
diabetes3
lm(diabetes3$Age ~ diabetes3$Diabetes)
lm(c(diabetes3$Age,diabetes3$BMI) ~ diabetes3$Diabetes)
lm(diabetes3 ~ diabetes3$Diabetes)
lm(diabetes3)
r <- lm(diabetes3)
summary(r)
diabetes3
pred1 <- predict(rf, x, type='prob')
mean(pred1 == y)
pred1
head(pred1)
pred3 <- predict(tree, x, type='prob')
head(pred3)
nnet_diabetes <- readRDS("~/Desktop/project/Dr.Oh-R_Flutter/dr_oh_spring/src/main/webapp/nnet_diabetes.rds")
read.csv('Data/서울시 병의원 위치 정보.csv')
read.csv('Data/서울시 병의원 위치 정보.csv', header = T)
read.csv('Data/서울시 병의원 위치 정보.csv', header = F)
read.csv('Data/서울시 병의원 위치 정보.csv')
read.csv('Data/서울시 병의원 위치 정보.csv',  header = T, fileEncoding = "euc-kr")
read.csv('Data/seoul_hospital.csv.csv',  header = T, fileEncoding = "euc-kr")
read.csv('Data/seoul_hospital.csv',  header = T, fileEncoding = "euc-kr")
read.csv('Data/seoul_hospital.csv',  header = T, fileEncoding = "CP949", encoding = "UTF-8")
hospital <- read.csv('Data/seoul_hospital.csv',  header = T, fileEncoding = "CP949", encoding = "UTF-8")
hospital[,c('병원경도','병원위도')]
write.csv(hospital[,c('병원경도','병원위도')],'Data/seoul_hospital2.csv')
readRDS('randomForest_stroke.rds')
